import React, { useState } from "react";

interface ExportRoadmapModalProps {
  project: {
    id: string;
    goal: string;
    phases: Array<{
      phase_id: string;
      phase_number: number;
      goal: string;
      why_it_matters: string;
      acceptance_criteria: string[];
      rollback_plan: string[];
      substeps?: Array<{
        substep_id: string;
        step_number: number;
        label: string;
        prompt_to_send: string;
        completed: boolean;
      }>;
      completed: boolean;
      locked: boolean;
    }>;
    current_phase: number;
    current_substep: number;
  };
  isOpen: boolean;
  onClose: () => void;
}

export const ExportRoadmapModal: React.FC<ExportRoadmapModalProps> = ({
  project,
  isOpen,
  onClose,
}) => {
  const [copied, setCopied] = useState<string | null>(null);

  if (!isOpen) return null;

  const generateMarkdown = (): string => {
    let markdown = `# ${project.goal}\n\n`;
    markdown += `**Project ID:** ${project.id}\n`;
    markdown += `**Current Progress:** Phase ${project.current_phase}, Substep ${project.current_substep}\n\n`;
    markdown += `---\n\n`;

    project.phases.forEach((phase) => {
      const status = phase.completed
        ? "‚úÖ Complete"
        : phase.phase_number === project.current_phase
          ? "üîÑ Active"
          : phase.locked
            ? "üîí Locked"
            : "‚è≥ Ready";

      markdown += `## ${phase.phase_id}: ${phase.goal}\n\n`;
      markdown += `**Status:** ${status}\n\n`;
      markdown += `**Why It Matters:** ${phase.why_it_matters}\n\n`;

      if (phase.acceptance_criteria && phase.acceptance_criteria.length > 0) {
        markdown += `**Acceptance Criteria:**\n`;
        phase.acceptance_criteria.forEach((criteria) => {
          markdown += `- ${criteria}\n`;
        });
        markdown += `\n`;
      }

      if (phase.substeps && phase.substeps.length > 0) {
        markdown += `**Substeps:**\n\n`;
        phase.substeps.forEach((substep) => {
          const substepStatus = substep.completed ? "‚úì" : "‚óã";
          markdown += `${substepStatus} **${substep.label}**\n`;
          markdown += `   - ${substep.prompt_to_send}\n\n`;
        });
      }

      if (phase.rollback_plan && phase.rollback_plan.length > 0) {
        markdown += `**Rollback Plan:**\n`;
        phase.rollback_plan.forEach((step) => {
          markdown += `- ${step}\n`;
        });
        markdown += `\n`;
      }

      markdown += `---\n\n`;
    });

    markdown += `\n*Generated by Zero-to-One Builder on ${new Date().toLocaleDateString()}*\n`;

    return markdown;
  };

  const generateJSON = (): string => {
    return JSON.stringify(
      {
        project_id: project.id,
        goal: project.goal,
        current_phase: project.current_phase,
        current_substep: project.current_substep,
        phases: project.phases.map((phase) => ({
          phase_id: phase.phase_id,
          phase_number: phase.phase_number,
          goal: phase.goal,
          why_it_matters: phase.why_it_matters,
          acceptance_criteria: phase.acceptance_criteria,
          rollback_plan: phase.rollback_plan,
          substeps: phase.substeps,
          completed: phase.completed,
          locked: phase.locked,
        })),
        exported_at: new Date().toISOString(),
      },
      null,
      2,
    );
  };

  const handleExportMarkdown = () => {
    const markdown = generateMarkdown();
    const blob = new window.Blob([markdown], { type: "text/markdown" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `roadmap-${project.id}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const handleExportJSON = () => {
    const json = generateJSON();
    const blob = new window.Blob([json], { type: "application/json" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `roadmap-${project.id}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const handleCopyMarkdown = async () => {
    const markdown = generateMarkdown();
    await navigator.clipboard.writeText(markdown);
    setCopied("markdown");
    setTimeout(() => setCopied(null), 2000);
  };

  const handleCopyJSON = async () => {
    const json = generateJSON();
    await navigator.clipboard.writeText(json);
    setCopied("json");
    setTimeout(() => setCopied(null), 2000);
  };

  const handleCopyShareLink = async () => {
    const shareUrl = `${window.location.origin}?project=${project.id}`;
    await navigator.clipboard.writeText(shareUrl);
    setCopied("link");
    setTimeout(() => setCopied(null), 2000);
  };

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-gradient-to-br from-gray-900 to-black border border-gray-700/50 rounded-3xl max-w-3xl w-full overflow-hidden shadow-2xl">
        {/* Header */}
        <div className="p-6 border-b border-gray-700/50 bg-gradient-to-r from-green-950/30 to-blue-950/30">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold text-white mb-2">
                üì§ Export Roadmap
              </h2>
              <p className="text-gray-400 text-sm">
                Share your project roadmap with your team
              </p>
            </div>
            <button
              onClick={onClose}
              className="w-10 h-10 rounded-xl bg-gray-800/60 hover:bg-gray-700/60 flex items-center justify-center transition-colors"
            >
              <svg
                className="w-5 h-5 text-gray-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 space-y-4">
          {/* Markdown Export */}
          <div className="border border-gray-700/50 bg-gradient-to-br from-gray-900/60 to-gray-800/40 rounded-xl p-5">
            <div className="flex items-start gap-4">
              <div className="w-12 h-12 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center text-2xl">
                üìù
              </div>
              <div className="flex-1 min-w-0">
                <h3 className="text-white font-semibold mb-2">
                  Markdown Format
                </h3>
                <p className="text-gray-400 text-sm mb-4">
                  Human-readable format perfect for documentation and GitHub
                </p>
                <div className="flex items-center gap-2">
                  <button
                    onClick={handleExportMarkdown}
                    className="px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 rounded-lg text-white text-sm font-medium transition-all"
                  >
                    Download .md
                  </button>
                  <button
                    onClick={handleCopyMarkdown}
                    className="px-4 py-2 bg-gray-700/60 hover:bg-gray-600/60 rounded-lg text-white text-sm font-medium transition-all"
                  >
                    {copied === "markdown" ? "‚úì Copied!" : "Copy to Clipboard"}
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* JSON Export */}
          <div className="border border-gray-700/50 bg-gradient-to-br from-gray-900/60 to-gray-800/40 rounded-xl p-5">
            <div className="flex items-start gap-4">
              <div className="w-12 h-12 bg-gradient-to-br from-green-600 to-teal-600 rounded-lg flex items-center justify-center text-2xl">
                üì¶
              </div>
              <div className="flex-1 min-w-0">
                <h3 className="text-white font-semibold mb-2">JSON Format</h3>
                <p className="text-gray-400 text-sm mb-4">
                  Structured data format for programmatic access and backups
                </p>
                <div className="flex items-center gap-2">
                  <button
                    onClick={handleExportJSON}
                    className="px-4 py-2 bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-500 hover:to-teal-500 rounded-lg text-white text-sm font-medium transition-all"
                  >
                    Download .json
                  </button>
                  <button
                    onClick={handleCopyJSON}
                    className="px-4 py-2 bg-gray-700/60 hover:bg-gray-600/60 rounded-lg text-white text-sm font-medium transition-all"
                  >
                    {copied === "json" ? "‚úì Copied!" : "Copy to Clipboard"}
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Share Link */}
          <div className="border border-gray-700/50 bg-gradient-to-br from-gray-900/60 to-gray-800/40 rounded-xl p-5">
            <div className="flex items-start gap-4">
              <div className="w-12 h-12 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg flex items-center justify-center text-2xl">
                üîó
              </div>
              <div className="flex-1 min-w-0">
                <h3 className="text-white font-semibold mb-2">Share Link</h3>
                <p className="text-gray-400 text-sm mb-4">
                  Copy a direct link to this project (requires project access)
                </p>
                <button
                  onClick={handleCopyShareLink}
                  className="px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 rounded-lg text-white text-sm font-medium transition-all"
                >
                  {copied === "link" ? "‚úì Link Copied!" : "Copy Share Link"}
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="p-4 border-t border-gray-700/50 bg-gray-900/40">
          <div className="flex items-center justify-between text-xs text-gray-500">
            <span>
              üí° Tip: Use Markdown for documentation, JSON for automation
            </span>
            <span>Project ID: {project.id.substring(0, 8)}...</span>
          </div>
        </div>
      </div>
    </div>
  );
};
